<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <title><%= h(@page_title || application_name) %></title>
    <link href="<%= url_for :controller=>'catalog',:action => 'opensearch', :format => 'xml', :only_path => false %>" title="<%= application_name%>" type="application/opensearchdescription+xml" rel="search"/>
    <%= javascript_include_tag :defaults %>
    <%= javascript_include_tag  'openvault' %>
    <%= javascript_include_tag  'jquery.tools.min' %>
    <%= javascript_include_tag 'blacklight', 'application', 'lightbox', :plugin=>:blacklight %>
    <%= stylesheet_link_tag 'yui', :plugin=>:blacklight, :media=>'all' %>
    <%= stylesheet_link_tag 'application', :media=>'all' %>
	<%= %>
	<link href="<%= url_for params.merge({:controller=>'catalog', :action => 'index', :format => 'rss', :per_page => 100, :only_path => false}) %>" type="application/rss+xml" rel="alternate" id="gallery" title=""/>
    <%= javascript_include_tag  'jit', 'jquery.viewport' %>
</head>
<div id="doc4" class="viz-show">
<div id="documents" class="gallery">
<a href="#" onclick="window.close()" class="close" style="float: right; padding-top: 5px; padding-right: 5px;">Close</a>
<h1>Relationship Map BETA</h1>
<div class="hint">This map is a work in progress. We welcome your <a href="/contact-us" target="_blank">feedback</a>.</div>
<div><p class="directions">Explore records through this relationship map. Prominent lines indicate stronger connections. Roll over an area to see more information. Clicking on a record brings it to the center of the map.</p></div>
<ul class="tabs menu">
<li class="<%= 'active' if @field == 'topic'%>"><%= link_to "Topic", :field => 'topic' %></li>
<li class="<%= 'active' if @field == 'people'%>"><%= link_to "People", :field => 'people' %></li>
<li class="<%= 'active' if @field == 'place'%>"><%= link_to "Place", :field => 'place' %></li>
</ul>
<div id="viewport" style="position: relative; width: 657px; height: 437px; overflow: hidden;">
<div id='zoom' style="-moz-border-radius-topleft: 5px; -webkit-border-top-left-radius: 5px; -moz-border-radius-bottomleft: 5px; -webkit-border-bottom-left-radius: 5px; z-index: 100; position: absolute; top: 0; right: 0; margin: 40px; margin-right: 0; width: 20px; height: 130px; background: rgba(255,255,255, 0.2); border: 1px solid #666; border-right: none;">
        <div class="zoom_in" style="color: white; position: absolute; top: 0; width: 100%; text-align: center;">+</div>
        <div class='ui-slider-handle' style='position: absolute; z-index: 1; background: #759905; width: 30px; margin-left: -5px; margin-right: -5px; height: 8px; '></div>           
        <div class="zoom_out" style="color: white; position: absolute; bottom: 0; width: 100%; text-align: center;">&ndash;</div>
     </div> 

<div id="infovis" class="inner" style="width: 6000px; height: 6000px; position: absolute; top: -2782px; left: -2671px;"></div>
</div>
</div>
<%
  require 'json'
  def doc_to_data doc
    {
      :id => doc.get(:id),
      :name => doc.get('title'),
      :children => [],
      :data => {
        :thumbnail => fedora_url + '/get/' + doc.get(:id) + '/sdef:THUMBNAIL/get',
        :popup => (render :partial => "popup", :locals => {:document => doc }),
        :type => 'record',
      }
    }
  end
  json = doc_to_data @document
  json['children'] = @records.select { |k,v| v.length > 2  && v.length < Math.sqrt(@similar.length)}.map { |k, v| {:id => k.parameterize.to_s, :name => k, :children => v.map { |x| doc_to_data x}, :data => {:type => 'metadata_value' }} }
%>
<script type="text/javascript">
$('#viewport').viewport();
//Log = console;
//Log.write = console.log;
var graph;
function init() {
	var json = <%= json.to_json %>;
	var infovis = document.getElementById('infovis');
	var w = infovis.offsetWidth - 50, h = infovis.offsetHeight - 50;
         graph = new $jit.RGraph({
        'injectInto': 'infovis',
        'width': w,
        'height': h,
        //Change node and edge styles such as
        //color, width and dimensions.
        Node: {
            dim: 4,
            color: "#f00",
            overridable: true
        },

        Edge: {
            color: "#23A4FF",
	    lineWidth: 2,
            overridable: true
        },

        //Allow tips

        nodeStylesSelected: {
          'color': '#ffc',
          'dim': 7
        },

        nodeStylesOnHover: {
          'dim': 6
        },

        iterations:100,
        levelDistance:120,
        transition: $jit.Trans.Elastic.easeOut,

        onBeforeCompute: function(node){
            //Log.write("centering");
        },
        //Attach event handlers and add text to the
        //labels. This method is only triggered on label
        //creation
        onCreateLabel: function(domElement, node){
            domElement.innerHTML = node.name;
	    if (node.data.thumbnail) {
		$(domElement).html('').append($('<div class="document"><div class="thumbnail"><img width="80" src="' + node.data.thumbnail + '" /></div></div>'));
		$('.document', domElement).append(node.data.popup);
	   }
	    $(domElement).bind( 'click', function () {
		graph.onClick(this.id, { hideLabels: false });
            });
        },
        //Change node styles when labels are placed
        //or moved.
        onPlaceLabel: function(domElement, node){
            var style = domElement.style;
            style.display = '';
            style.cursor = 'pointer';
          //  style.fontSize = "0.8em";
          //  style.color = "#ddd";

            var left = parseInt(style.left);
            var top = parseInt(style.top);
            var w = domElement.offsetWidth;
            var h= domElement.offsetHeight;
         style.left = (left - w / 2) + 'px';
            style.top = (top - h / 2) + 'px';
	$(domElement).removeClass().addClass('node').addClass(node.data.type).addClass('depth_' + node._depth);
        },

        onAfterCompute: function(){
            //Log.write("done");

        },

	onBeforePlotLine: function(adj) {
		level = Math.min(adj.nodeFrom._depth, adj.nodeTo._depth);
		if(level < 2) {
			adj.setData('color', 'rgba(255,255,255,0.58)');
			adj.setData('lineWidth', 2);
		} else {
			adj.setData('color', 'rgba(255,255,255,0.58)');
			adj.setData('lineWidth', 1);

		}
	},
    });

    //load JSON data.
    graph.loadJSON(json);
    //compute positions incrementally and animate.
    graph.compute();
    graph.plot();

jQuery('#zoom').slider({orientation: 'vertical',  max: 250, min: 25, slide: function(e,ui) { if(!$(e.originalTarget).hasClass('ui-slider')) { return false; } graph.config.levelDistance = ui.value; graph.refresh(); } }).slider('value', graph.config.levelDistance);

    $('div.node').hover(function() { $(this).css('zIndex', 6); $(this).find('.popup').css('display', 'block').fadeTo('fast', 1, function() { $(this).css('display', 'block');}); }, function() { $(this).css('zIndex', 1); $(this).find('.popup').fadeTo('fast', 0, function() { $(this).css('display', 'none'); }); });
    $('#zoom .zoom_in').bind('click', function(e) { zoom(+10); });
    $('#zoom .zoom_out').bind('click', function(e) { zoom(-10); });

function zoom(i) {
    jQuery('#zoom').slider('value', jQuery('#zoom').slider('value')+i); 
    graph.config.levelDistance = jQuery('#zoom').slider('value');
    graph.refresh();
    //graph_zoom(jQuery('#zoom').slider('value'));
}

}
$(function() { 
init();
});
</script>
</div>
</body>
</html>
